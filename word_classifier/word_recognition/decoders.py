from typing import Iterable
import numpy as np


def ctc_reduce(x: Iterable[int], blank: int = 0) -> list[int]:
    """
    Reduce output sequence generated by connectionist temporal classification
    algorithm -- merge repeated tokens and then remove blanks.
    """
    # merge
    output = []
    prev = None
    for xi in x:
        if xi != prev:
            output.append(xi)
        prev = xi

    # remove blanks
    return [xi for xi in output if xi != blank]


def tokens2characters(seq: Iterable[int], itos: list[str]) -> str:
    return ''.join(itos[num] for num in seq)


def ctc_greedy(log_probs: np.ndarray, itos: list[str], blank: int = 0) -> str:
    """
    Generate word from log-probabilities by selecting the most likely character
    for each frame.
    """
    assert log_probs.ndim == 2
    tokens = np.argmax(log_probs, axis=1)
    tokens = ctc_reduce(tokens, blank)
    return tokens2characters(tokens, itos)
